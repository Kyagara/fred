plugins {
    id("dev.architectury.loom") version("1.7-SNAPSHOT")
}

def loader = property("loom.platform")
def isFabric = loader == "fabric"

def minecraft_version = property("deps.minecraft")
def mod_version = property("mod.version")

base {
    archivesName = "${property("mod.name")}-${mod_version}-${minecraft_version}+${loader}"
}

repositories {
    maven { url("https://maven.neoforged.net/releases") }
    maven { url("https://maven.wispforest.io/releases") }
    maven { url("https://maven.su5ed.dev/releases") }
}

loom {
    accessWidenerPath = getRootProject().file("src/main/resources/fred.accesswidener")

    decompilers {
        vineflower { // Adds names to lambdas - useful for mixins
            options.put("mark-corresponding-synthetics", "1")
        }
    }

    runConfigs.all {
        ideConfigGenerated(true)
        vmArgs("-Dmixin.debug.export=true")
        runDir = "../../run"
    }
}

dependencies {
    minecraft("net.minecraft:minecraft:${minecraft_version}")

    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:${property("deps.yarn")}:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:${property("deps.yarn_mappings_neoforge_patch")}")
    }

    if (isFabric) {
        modImplementation("net.fabricmc:fabric-loader:${property("deps.fabric_loader")}")
        modImplementation("net.fabricmc.fabric-api:fabric-api:${property("deps.fabric_api")}")

        annotationProcessor(modImplementation("io.wispforest:owo-lib:${property("deps.owo")}"))
    } else {
        neoForge("net.neoforged:neoforge:${property("deps.neoforge")}")

        modImplementation("org.sinytra.forgified-fabric-api:forgified-fabric-api:${property("deps.fabric_api")}")
        annotationProcessor(modImplementation("io.wispforest:owo-lib-neoforge:${property("deps.owo")}"))
    }

    modImplementation("dev.architectury:architectury-${loader}:${property("deps.architectury_api")}")
}

tasks.processResources {
    def props = [
            version  : mod_version,
            minecraft: minecraft_version,
    ]

    filesMatching("fabric.mod.json") { expand(props) }
    filesMatching("META-INF/neoforge.mods.toml") { expand(props) }
    filesMatching("fred.mixins.json") { expand(props) }
}

tasks.register('buildAndCollect', Copy) {
    group = 'build'
    from(tasks.remapJar.archiveFile)
    into(rootProject.layout.buildDirectory.file("${minecraft_version}/"))
    dependsOn('build')
}

afterEvaluate {
    stonecutter {
        stonecutter.const("fabric", loader == "fabric")
        stonecutter.const("neoforge", loader == "neoforge")
    }
}

if (stonecutter.current.isActive) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}
